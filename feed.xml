<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://changgunyee.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://changgunyee.github.io/" rel="alternate" type="text/html" /><updated>2019-09-19T20:43:13+09:00</updated><id>https://changgunyee.github.io/feed.xml</id><title type="html">changgunyee</title><subtitle>개발,음악 등의 잡동사니를 모아두는 블로그</subtitle><author><name>이창권</name></author><entry><title type="html">부스트 코스(웹) PROJ6-1</title><link href="https://changgunyee.github.io/boost-course/2019/09/19/boostCourse(web)-proj6-1.html" rel="alternate" type="text/html" title="부스트 코스(웹) PROJ6-1" /><published>2019-09-19T00:00:00+09:00</published><updated>2019-09-19T00:00:00+09:00</updated><id>https://changgunyee.github.io/boost-course/2019/09/19/boostCourse(web)-proj6-1</id><content type="html" xml:base="https://changgunyee.github.io/boost-course/2019/09/19/boostCourse(web)-proj6-1.html">&lt;p&gt;지난 개발까지에서는 한줄평 조회가 있었다면 이번에는 한줄평 등록입니다!&lt;/p&gt;

&lt;p&gt;이번 백엔드 프로젝트에서는 파일 업로드와 로그 인터셉트로 크게 두가지 기능을 구현해야 합니다.&lt;/p&gt;

&lt;h3 id=&quot;파일-업로드&quot;&gt;파일 업로드&lt;/h3&gt;

&lt;p&gt;기존에 이미지를 보여줄 때는 컨트롤러를 거치지 않고 webapp폴더 경로 아래의 static한 파일들을 보여주었습니다.&lt;br /&gt;
하지만 이는 보안 상의 이유로 좋지 않습니다.&lt;br /&gt;
게다가 사용자가 한줄평에 이미지를 넣어 등록하는 경우, 모두가 접근 가능한 webapp폴더에 저장하는 것이 아닌 다른 저장소에 저장한 다음 컨트롤러를 통해서 접근하게 하여야 합니다.&lt;/p&gt;

&lt;p&gt;파일 업로드의 경우에 사용자가 올린 파일을 저장하기 위해 해당 파일명을 유일하게 해야하기 때문에, UUID클래스를 사용하여 파일명을 작성하였습니다.&lt;br /&gt;
파일은 주로 크기가 크기 때문에 버퍼를 이용하여 저장하여야하는데, 이를 위해 InputStream과 OutputStream을 이용하여 로컬에 파일을 저장하였습니다.&lt;/p&gt;

&lt;p&gt;파일 다운로드를 위한 컨트롤러는 간단하기 때문에 예시를 보도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;multipart 요청이 들어올 시에 는 따로 resolver를 설정해 주어야 처리가 가능합니다.&lt;br /&gt;
따라서 WebMvcContextConfiguration파일에 밑과 같이 bean을 추가하여 줍니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MultipartResolver&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;multipartResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;multipart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CommonsMultipartResolver&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multipartResolver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;multipart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CommonsMultipartResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;multipartResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMaxUploadSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10485760&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1024 * 1024 * 10&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multipartResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 필요한 컨트롤러를 작성하여 줍니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;GetMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/comment-image/{id}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getCommentImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;PathVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commentImageId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Content-Transfer-Encoding&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;binary&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;파일&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;확장자&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Pragma&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;no-cache;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Expires&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-1;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;FileInputStream&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FileInputStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;저장소&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;경로&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;파일&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;이름&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getOutputStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;writeWithStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;file Save Error&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;로그-인터셉터&quot;&gt;로그 인터셉터&lt;/h3&gt;

&lt;p&gt;인터셉터는 Dispatcher servlet에서 Handler(Controller)로 요청을 보낼 때, Handler에서 Dispathcer servlet으로 응답을 보낼 때 동작합니다.&lt;/p&gt;

&lt;p&gt;운영 중인 웹 애플리케이션이 문제가 발생했을 경우, 문제의 원인을 파악하려면 문제가 발생했을 때 당시의 정보가 필요합니다.&lt;br /&gt;
이런 정보를 얻기 위해서 Exception이 발생했거나, 중요 기능이 실행되는 부분에서는 적절한 로그를 남겨야 합니다.&lt;/p&gt;

&lt;p&gt;인터셉터를 이용하여 로그를 남길 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Override&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addInterceptors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;InterceptorRegistry&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addInterceptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LogInterceptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 인터셉터를 WebMvcContextConfiguration에 추가하여 준 후&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogInterceptor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HandlerInterceptorAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postHandle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModelAndView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelAndView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;서블릿&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;작동&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;종료&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;후&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;로그&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;남기기&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;컨트롤러 : {} 액션: {} &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controllerName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preHandle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;err&quot;&gt;서블릿&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;작동&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;전&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;로그&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;남기기&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;요청 URL:{}, 시간:{}, 클라이언트ip:{} &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRequestURL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 형식으로 모든 처리를 인터셉트해 로그를 남길 수 있습니다.&lt;/p&gt;</content><author><name>이창권</name></author><summary type="html">지난 개발까지에서는 한줄평 조회가 있었다면 이번에는 한줄평 등록입니다! 이번 백엔드 프로젝트에서는 파일 업로드와 로그 인터셉트로 크게 두가지 기능을 구현해야 합니다. 파일 업로드 기존에 이미지를 보여줄 때는 컨트롤러를 거치지 않고 webapp폴더 경로 아래의 static한 파일들을 보여주었습니다. 하지만 이는 보안 상의 이유로 좋지 않습니다. 게다가 사용자가 한줄평에 이미지를 넣어 등록하는 경우, 모두가 접근 가능한 webapp폴더에 저장하는 것이 아닌 다른 저장소에 저장한 다음 컨트롤러를 통해서 접근하게 하여야 합니다. 파일 업로드의 경우에 사용자가 올린 파일을 저장하기 위해 해당 파일명을 유일하게 해야하기 때문에, UUID클래스를 사용하여 파일명을 작성하였습니다. 파일은 주로 크기가 크기 때문에 버퍼를 이용하여 저장하여야하는데, 이를 위해 InputStream과 OutputStream을 이용하여 로컬에 파일을 저장하였습니다. 파일 다운로드를 위한 컨트롤러는 간단하기 때문에 예시를 보도록 하겠습니다. multipart 요청이 들어올 시에 는 따로 resolver를 설정해 주어야 처리가 가능합니다. 따라서 WebMvcContextConfiguration파일에 밑과 같이 bean을 추가하여 줍니다. @Bean public MultipartResolver multipartResolver() { org.springframework.web.multipart.commons.CommonsMultipartResolver multipartResolver = new org.springframework.web.multipart.commons.CommonsMultipartResolver(); multipartResolver.setMaxUploadSize(10485760); // 1024 * 1024 * 10 return multipartResolver; } 그리고 필요한 컨트롤러를 작성하여 줍니다. @GetMapping(&quot;/comment-image/{id}&quot;) public void getCommentImage(@PathVariable(name = &quot;id&quot;) int commentImageId, HttpServletRequest request, HttpServletResponse response) { response.setHeader(&quot;Content-Transfer-Encoding&quot;, &quot;binary&quot;); response.setHeader(&quot;Content-Type&quot;, 파일 확장자); response.setHeader(&quot;Pragma&quot;, &quot;no-cache;&quot;); response.setHeader(&quot;Expires&quot;, &quot;-1;&quot;); try { FileInputStream fis = new FileInputStream(저장소 경로+파일 이름 OutputStream out = response.getOutputStream(); writeWithStream(fis, out); } catch (Exception ex) { throw new RuntimeException(&quot;file Save Error&quot;); } } 로그 인터셉터 인터셉터는 Dispatcher servlet에서 Handler(Controller)로 요청을 보낼 때, Handler에서 Dispathcer servlet으로 응답을 보낼 때 동작합니다. 운영 중인 웹 애플리케이션이 문제가 발생했을 경우, 문제의 원인을 파악하려면 문제가 발생했을 때 당시의 정보가 필요합니다. 이런 정보를 얻기 위해서 Exception이 발생했거나, 중요 기능이 실행되는 부분에서는 적절한 로그를 남겨야 합니다. 인터셉터를 이용하여 로그를 남길 수 있습니다. @Override public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(new LogInterceptor()); } 위와 같이 인터셉터를 WebMvcContextConfiguration에 추가하여 준 후 public class LogInterceptor extends HandlerInterceptorAdapter { private Logger logger = LoggerFactory.getLogger(this.getClass()); @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception { 서블릿 작동 종료 후 로그 남기기 logger.debug(&quot;컨트롤러 : {} 액션: {} &quot;, controllerName, actionName); } @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { 서블릿 작동 전 request 로그 남기기 logger.debug(&quot;요청 URL:{}, 시간:{}, 클라이언트ip:{} &quot;,request.getRequestURL(), } } 위와 같은 형식으로 모든 처리를 인터셉트해 로그를 남길 수 있습니다.</summary></entry><entry><title type="html">부스트 코스(웹) PROJ5-2</title><link href="https://changgunyee.github.io/boost-course/2019/09/11/boostCourse(web)-proj5-2.html" rel="alternate" type="text/html" title="부스트 코스(웹) PROJ5-2" /><published>2019-09-11T00:00:00+09:00</published><updated>2019-09-11T00:00:00+09:00</updated><id>https://changgunyee.github.io/boost-course/2019/09/11/boostCourse(web)-proj5-2</id><content type="html" xml:base="https://changgunyee.github.io/boost-course/2019/09/11/boostCourse(web)-proj5-2.html">&lt;p&gt;네이버 예약 서비스에서 예약 페이지, 이메일 로그인 페이지, 예매 내역 확인 페이지까지 총 3가지의 예약 기능을 위한 페이지들을 개발하였습니다.&lt;/p&gt;

&lt;p&gt;이번에 프런트 자바스크립트에서의 중요한 부분은 정규표현식, UI기능 별로 묶어 modular하게 개발로 총 2가지였습니다.&lt;/p&gt;

&lt;h3 id=&quot;정규표현식&quot;&gt;정규표현식&lt;/h3&gt;

&lt;p&gt;문자열의 특정 패턴을 찾을 수 있는 문법입니다.&lt;br /&gt;
패턴을 찾아서 추출, 삭제, 치환 등의 문자열 조작을 할 수 있습니다.&lt;br /&gt;
주로 이메일, 주소, 전화번호 등의 규칙 검사에 사용됩니다.&lt;br /&gt;
정규표현식 사용법에 대해서는 다음의 위키 사이트에서 학습하였습니다.&lt;br /&gt;
&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%A0%95%EA%B7%9C_%ED%91%9C%ED%98%84%EC%8B%9D&quot;&gt;https://ko.wikipedia.org/wiki/%EC%A0%95%EA%B7%9C_%ED%91%9C%ED%98%84%EC%8B%9D&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이번에 전화번호와 이메일 Input에 규칙검사를 적용하였습니다.&lt;br /&gt;
자바스크립트에서 정규표현식에 사용할 수 있는 함수가 몇개 존재합니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Function&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exec&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;대응되는 문자열을 찾는 RegExp 메소드입니다. 정보를 가지고 있는 배열을 반환합니다.    대응되는 문자열을 찾지 못했다면 null을 반환합니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;대응되는 문자열이 있는지 검사하는 RegExp 메소드 입니다. true 나 false를 반환합니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;match&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;대응되는 문자열을 찾는 RegExp 메소드입니다. 정보를 가지고 있는 배열을 반환합니다. 대응되는 문자열을 찾지 못했다면 null을 반환합니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;search&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;대응되는 문자열이 있는지 검사하는 String 메소드 입니다. 대응된 부분의 인덱스를 반환합니다. 대응되는 문자열을 찾지 못했다면 -1을 반환합니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;replace&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;대응되는 문자열을 찾아 다른 문자열로 치환하는 String 메소드입니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;split&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;정규식 혹은 문자열로 대상 문자열을 나누어 배열로 반환하는 String 메소드입니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;저는 값을 찾아낼 필요 없이 검사만 하면 되므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;함수를 다음과 같이 사용하였습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//이메일 규칙검사&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;0-9a-zA-Z&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;]([&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;-_.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;]?[&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;0-9a-zA-Z&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;*@&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;0-9a-zA-Z&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;]([&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;-_.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;]?[&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;0-9a-zA-Z&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;*.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;a-zA-Z&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;]{2,3}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inputValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;객체화를-통한-modular-구현&quot;&gt;객체화를 통한 Modular 구현&lt;/h3&gt;

&lt;p&gt;이를 위한 평가기준표는 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;자주 사용되는 함수를 객체형태로 묶어서 사용해야 한다.&lt;/li&gt;
  &lt;li&gt;UI 별로 기능을 묶어서 객체화된 모듈을 만들어야 하며, prototype방식을 적용해야 한다.
…(&lt;del&gt;당최 무슨 소리인지&lt;/del&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;저도 처음에 보고 많이 혼동되었습니다.&lt;br /&gt;
그러나 마스터님들이 의도한 대로 최대한 구현하려고 노력하였고 완성하고 파일 구조를 보니 한눈에 어떤 파일이 어떤 용도인지 알 수 있었고, 가독성과 재사용성이 눈에 띄게 늘었습니다.&lt;/p&gt;

&lt;p&gt;예를 들어 이메일 입력 UI에 대해서 살펴보도록 하겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;removeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./Constants.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//자체 class추가 함수 import&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emailElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;warningElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emailElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;emailElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;warningElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;warningElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;registerEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;이메일&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;에&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;이벤트&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;등록&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;check&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;이메일&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;규칙&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;검사&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;....&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;다른&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;이메일&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;만을&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;위한&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;함수를&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;추가하여&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;사용가능&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;합니다&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 Email UI만을 위한 객체와 파일을 만듭니다. prototype을 이용해 생성자 패턴으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Email&lt;/code&gt; module을 만들었습니다.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Email&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./module/Email.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;DOMContentLoaded&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;emailElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#email&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;emailWarningElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;emailElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.inline_form .warning_msg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emailElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;emailWarningElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activateReserveBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 예약하기 페이지에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Email&lt;/code&gt;모듈을 받아와 객체를 생성하기만 하면 알아서 event 등록부터 필요한 기능을 수행합니다.&lt;br /&gt;
이후 어떤 페이지에서 이메일 UI를 필요로 해도 &lt;code class=&quot;highlighter-rouge&quot;&gt;Email&lt;/code&gt;모듈만 받아와 객체를 생성해주면 됩니다.&lt;br /&gt;
물론 프런트엔드 프레임워크인 Vue나 React를 사용하면 애초에 개발을 Componenet단위로 하기 때문에 저절로 위와 같이 개발하게 됩니다.(이러한 형식의 개발은 재사용성이나 가독성을 엄청 끌어올리기 때문에 정말 좋다고 생각합니다.)&lt;br /&gt;
또한 javascript는 es6의 class를 사용한다 하더라도 내부적으로 결국 prototype을 사용하기 때문에 prototype을 제대로 이해해야합니다.&lt;br /&gt;
밑의 링크를 통해 공부하면 굉장히 좋습니다.&lt;br /&gt;
&lt;a href=&quot;https://poiemaweb.com/js-prototype&quot;&gt;https://poiemaweb.com/js-prototype&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;완성본 시뮬레이션 영상입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-09-11/simulation.gif&quot; style=&quot;width:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-09-11/complete.png&quot; /&gt;&lt;/p&gt;</content><author><name>이창권</name></author><summary type="html">네이버 예약 서비스에서 예약 페이지, 이메일 로그인 페이지, 예매 내역 확인 페이지까지 총 3가지의 예약 기능을 위한 페이지들을 개발하였습니다. 이번에 프런트 자바스크립트에서의 중요한 부분은 정규표현식, UI기능 별로 묶어 modular하게 개발로 총 2가지였습니다. 정규표현식 문자열의 특정 패턴을 찾을 수 있는 문법입니다. 패턴을 찾아서 추출, 삭제, 치환 등의 문자열 조작을 할 수 있습니다. 주로 이메일, 주소, 전화번호 등의 규칙 검사에 사용됩니다. 정규표현식 사용법에 대해서는 다음의 위키 사이트에서 학습하였습니다. https://ko.wikipedia.org/wiki/%EC%A0%95%EA%B7%9C_%ED%91%9C%ED%98%84%EC%8B%9D 이번에 전화번호와 이메일 Input에 규칙검사를 적용하였습니다. 자바스크립트에서 정규표현식에 사용할 수 있는 함수가 몇개 존재합니다. Function Description exec 대응되는 문자열을 찾는 RegExp 메소드입니다. 정보를 가지고 있는 배열을 반환합니다. 대응되는 문자열을 찾지 못했다면 null을 반환합니다.     test 대응되는 문자열이 있는지 검사하는 RegExp 메소드 입니다. true 나 false를 반환합니다.     match 대응되는 문자열을 찾는 RegExp 메소드입니다. 정보를 가지고 있는 배열을 반환합니다. 대응되는 문자열을 찾지 못했다면 null을 반환합니다.     search 대응되는 문자열이 있는지 검사하는 String 메소드 입니다. 대응된 부분의 인덱스를 반환합니다. 대응되는 문자열을 찾지 못했다면 -1을 반환합니다.     replace 대응되는 문자열을 찾아 다른 문자열로 치환하는 String 메소드입니다.     split 정규식 혹은 문자열로 대상 문자열을 나누어 배열로 반환하는 String 메소드입니다.     저는 값을 찾아낼 필요 없이 검사만 하면 되므로 test함수를 다음과 같이 사용하였습니다. //이메일 규칙검사 if (!(/^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/.test(this.inputValue))) { return false; } return true; 객체화를 통한 Modular 구현 이를 위한 평가기준표는 다음과 같습니다. 자주 사용되는 함수를 객체형태로 묶어서 사용해야 한다. UI 별로 기능을 묶어서 객체화된 모듈을 만들어야 하며, prototype방식을 적용해야 한다. …(당최 무슨 소리인지) 저도 처음에 보고 많이 혼동되었습니다. 그러나 마스터님들이 의도한 대로 최대한 구현하려고 노력하였고 완성하고 파일 구조를 보니 한눈에 어떤 파일이 어떤 용도인지 알 수 있었고, 가독성과 재사용성이 눈에 띄게 늘었습니다. 예를 들어 이메일 입력 UI에 대해서 살펴보도록 하겠습니다. import {addClass, removeClass} from &quot;./Constants.js&quot;;//자체 class추가 함수 import export default function Email(emailElement, warningElement) { this.emailElement = emailElement; this.warningElement = warningElement; this.registerEvent(); } Email.prototype = { registerEvent: function () { 이메일UI에 이벤트 등록 }, check : function () { 이메일 규칙 검사 }, .... 다른 이메일 UI만을 위한 함수를 추가하여 사용가능 합니다. } 위와 같이 Email UI만을 위한 객체와 파일을 만듭니다. prototype을 이용해 생성자 패턴으로 Email module을 만들었습니다. import Email from &quot;./module/Email.js&quot;; document.addEventListener(&quot;DOMContentLoaded&quot;, () =&amp;gt; { const emailElement = document.querySelector('#email'); const emailWarningElement = emailElement.parentElement.parentElement.querySelector('.inline_form .warning_msg'); const email = new Email(emailElement, emailWarningElement, activateReserveBtn); ... ... }) 위와 같이 예약하기 페이지에서 Email모듈을 받아와 객체를 생성하기만 하면 알아서 event 등록부터 필요한 기능을 수행합니다. 이후 어떤 페이지에서 이메일 UI를 필요로 해도 Email모듈만 받아와 객체를 생성해주면 됩니다. 물론 프런트엔드 프레임워크인 Vue나 React를 사용하면 애초에 개발을 Componenet단위로 하기 때문에 저절로 위와 같이 개발하게 됩니다.(이러한 형식의 개발은 재사용성이나 가독성을 엄청 끌어올리기 때문에 정말 좋다고 생각합니다.) 또한 javascript는 es6의 class를 사용한다 하더라도 내부적으로 결국 prototype을 사용하기 때문에 prototype을 제대로 이해해야합니다. 밑의 링크를 통해 공부하면 굉장히 좋습니다. https://poiemaweb.com/js-prototype 완성본 시뮬레이션 영상입니다.</summary></entry><entry><title type="html">부스트 코스(웹) PROJ5-1</title><link href="https://changgunyee.github.io/boost-course/2019/09/04/boostCourse(web)-proj5-1.html" rel="alternate" type="text/html" title="부스트 코스(웹) PROJ5-1" /><published>2019-09-04T00:00:00+09:00</published><updated>2019-09-04T00:00:00+09:00</updated><id>https://changgunyee.github.io/boost-course/2019/09/04/boostCourse(web)-proj5-1</id><content type="html" xml:base="https://changgunyee.github.io/boost-course/2019/09/04/boostCourse(web)-proj5-1.html">&lt;p&gt;부스트 코스 proj5-1를 진행하였습니다.&lt;/p&gt;

&lt;p&gt;네이버 예약 서비스의 예약 관련 페이지들을 위한 Controller와 API를 위한 Controller를 개발하였습니다.&lt;br /&gt;
예매하기 페이지와 예약자 이메일 입력 페이지, 예약확인 페이지로 총 3개와 더불어 예약정보 조회를 위한 &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/reservations&lt;/code&gt;와 예약하기 &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/reservations&lt;/code&gt;, 예약취소하기 &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/reservations/{reservationId}&lt;/code&gt; 총 3개의 API까지 개발하였습니다.&lt;br /&gt;
이번에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt;문 외에 &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt;문과 &lt;code class=&quot;highlighter-rouge&quot;&gt;delete&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;insert&lt;/code&gt;문을 사용한다는 것을 제외하면 기본적인 Controller작성은 proj3-1이나 proj4-1과 비슷하였습니다.&lt;br /&gt;
Controller작성과 더불어 이번 과제에서는 특별히 &lt;code class=&quot;highlighter-rouge&quot;&gt;session&lt;/code&gt;이라는 것을 사용하였는데 이와 비슷한 기능을 하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;cookie&lt;/code&gt;와 함께 알아 보도록 하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;controller&quot;&gt;Controller&lt;/h2&gt;
&lt;p&gt;사실 proj4-1에서 잘못한 점이 있습니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt;문만을 사용하는 dao함수들을 사용할 때는 굳이 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Transactional&lt;/code&gt;을 사용할 필요가 없습니다.&lt;br /&gt;
왜냐하면 데이터베이스의 무결성을 해치는 것도 아닐 뿐더러 함수가 중간에 에러가 난다 하더라도 이상한 값을 반환하거나 하진 않기 때문입니다.(저는 2개이상의 sql문을 사용하면 무조건 사용해야하는 줄 알았습니다.)&lt;br /&gt;
이번에는 예약하기의 기능을 하는 service 함수를 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;reservation_info&lt;/code&gt;테이블에도 &lt;code class=&quot;highlighter-rouge&quot;&gt;insert&lt;/code&gt;를 해야하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;reservation_info_price&lt;/code&gt;테이블에도 &lt;code class=&quot;highlighter-rouge&quot;&gt;insert&lt;/code&gt;해야하기 때문에 이와같이 db를 변경하는 sql문들을 2개이상 사용할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Transactional&lt;/code&gt;을 사용해야 합니다.&lt;br /&gt;
@Transactional annotation을 사용하면 함수가 실행되거나, 중간에 문제가 생기면 아예 함수를 실행하기 전으로 rollback하게끔 도와줍니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ReservationResponse&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reserveTicket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ReservationParam&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reservationParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;reservation_info&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;테이블에&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;reservation_info_price&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;테이블에&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//2개의 insert문 사용으로  @Transactional추가&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;session과-cookie&quot;&gt;Session과 Cookie&lt;/h2&gt;
&lt;p&gt;쿠키와 세션의 가장 큰 차이점이라 한다면 쿠키는 클라이언트에 정보를 저장해두는 기술이고, 세션은 서버에 저장을 한다는 점입니다.&lt;br /&gt;
그림으로 이해하여 봅시다!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;cookie&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-09-04/cookie1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-09-04/cookie2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;쿠키는 위와 같이 웹 클라이언트가 서버에 요청을 하면 서버에서 쿠키를 만들어 응답에 같이 보내주는 형식을 취합니다.&lt;br /&gt;
그 후에는 클라이언트에서 요청을 보낼 때 쿠키와 같이 보내고, 서버에서는 받은 쿠키를 확인하여 정보를 쿠키에 맞게 보냅니다.&lt;br /&gt;
단 저장된 정보가 클라이언트에 있으므로, 사용자나 시스템이 쿠키를 들여다볼 수 있다는 단점이 있습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;session&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-09-04/session1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-09-04/session2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;세션은 결국 쿠키를 사용한 기술입니다.&lt;br /&gt;
단 서버에서 보관한다는 점에서 다릅니다.&lt;br /&gt;
클라이언트가 요청을 보내면 서버에서 세션키와 세션을 생성해 세션키를 담은 cookie를 응답에 포함시켜 보내줍니다.&lt;br /&gt;
이후 클라이언트가 요청을 했을 때는 세션키를 담은 쿠키를 서버에 보내 서버에서 세션키를 왁인하여 저장된 정보를 응답해줍니다.&lt;/p&gt;

&lt;p&gt;쿠키를 사용하면 사용자나 시스템이 들여다 볼수도 있기 때문에, 중요한 정보를 담지 못합니다. 하지만 세션을 사용하면 저장소가 서버에 있기 때문에, 어떤 정보도 세션에 담아둘 수 있는 장점이 있습니다.(단 서버가 힘들어 하겠죠?)&lt;/p&gt;

&lt;p&gt;Spring에서 session을 사용하는 법을 익혀봅시다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@SessionAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ReservationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/myreservation&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;renderMyReservationPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ModelAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModelMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;의&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;을&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;참조해&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reservation_info&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;검색&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@ModelAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;첫 번째로 다음과 같이 컨트롤러에 &lt;code class=&quot;highlighter-rouge&quot;&gt;@SessionAttributes&lt;/code&gt; annotation을 추가하여 줍니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;@SessionAttributes&lt;/code&gt; 파라미터로 지정된 이름과 같은 이름이 &lt;code class=&quot;highlighter-rouge&quot;&gt;@ModelAttribute&lt;/code&gt;에 지정되어 있을 경우 메소드가 반환되는 값은 세션에 저장됩니다.
이후 다른 함수에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;@ModelAttribute&lt;/code&gt;를 parameter로 사용하면 session에서 해당 이름을 가진 객체를 가져와 사용할 수 있습니다.(간단하죠?)&lt;/p&gt;

&lt;p&gt;함수 내 parameter로 &lt;code class=&quot;highlighter-rouge&quot;&gt;@ModelAttribute&lt;/code&gt;대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;@SessionAttribute&lt;/code&gt;를 사용할 수도 있습니다.&lt;/p&gt;

&lt;p&gt;개인적으로 강의 중에 배운 인터셉터나 아규먼트 리졸버도 공부한 만큼 사용해보고 싶었는데 프로젝트의 기획서나 명세에 없어서 아쉬웠습니다.&lt;/p&gt;

&lt;p&gt;다음에 도전할 기회가 있었으면 좋겠습니당.~~~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-09-04/complete.png&quot; /&gt;&lt;/p&gt;</content><author><name>이창권</name></author><summary type="html">부스트 코스 proj5-1를 진행하였습니다. 네이버 예약 서비스의 예약 관련 페이지들을 위한 Controller와 API를 위한 Controller를 개발하였습니다. 예매하기 페이지와 예약자 이메일 입력 페이지, 예약확인 페이지로 총 3개와 더불어 예약정보 조회를 위한 /api/reservations와 예약하기 /api/reservations, 예약취소하기 /api/reservations/{reservationId} 총 3개의 API까지 개발하였습니다. 이번에는 select문 외에 update문과 delete,insert문을 사용한다는 것을 제외하면 기본적인 Controller작성은 proj3-1이나 proj4-1과 비슷하였습니다. Controller작성과 더불어 이번 과제에서는 특별히 session이라는 것을 사용하였는데 이와 비슷한 기능을 하는 cookie와 함께 알아 보도록 하겠습니다. Controller 사실 proj4-1에서 잘못한 점이 있습니다. select문만을 사용하는 dao함수들을 사용할 때는 굳이 @Transactional을 사용할 필요가 없습니다. 왜냐하면 데이터베이스의 무결성을 해치는 것도 아닐 뿐더러 함수가 중간에 에러가 난다 하더라도 이상한 값을 반환하거나 하진 않기 때문입니다.(저는 2개이상의 sql문을 사용하면 무조건 사용해야하는 줄 알았습니다.) 이번에는 예약하기의 기능을 하는 service 함수를 위해서는 reservation_info테이블에도 insert를 해야하고, reservation_info_price테이블에도 insert해야하기 때문에 이와같이 db를 변경하는 sql문들을 2개이상 사용할 때 @Transactional을 사용해야 합니다. @Transactional annotation을 사용하면 함수가 실행되거나, 중간에 문제가 생기면 아예 함수를 실행하기 전으로 rollback하게끔 도와줍니다. @Override @Transactional public ReservationResponse reserveTicket(ReservationParam reservationParam) { reservation_info테이블에 insert reservation_info_price테이블에 insert//2개의 insert문 사용으로 @Transactional추가 Session과 Cookie 쿠키와 세션의 가장 큰 차이점이라 한다면 쿠키는 클라이언트에 정보를 저장해두는 기술이고, 세션은 서버에 저장을 한다는 점입니다. 그림으로 이해하여 봅시다! cookie 쿠키는 위와 같이 웹 클라이언트가 서버에 요청을 하면 서버에서 쿠키를 만들어 응답에 같이 보내주는 형식을 취합니다. 그 후에는 클라이언트에서 요청을 보낼 때 쿠키와 같이 보내고, 서버에서는 받은 쿠키를 확인하여 정보를 쿠키에 맞게 보냅니다. 단 저장된 정보가 클라이언트에 있으므로, 사용자나 시스템이 쿠키를 들여다볼 수 있다는 단점이 있습니다. session 세션은 결국 쿠키를 사용한 기술입니다. 단 서버에서 보관한다는 점에서 다릅니다. 클라이언트가 요청을 보내면 서버에서 세션키와 세션을 생성해 세션키를 담은 cookie를 응답에 포함시켜 보내줍니다. 이후 클라이언트가 요청을 했을 때는 세션키를 담은 쿠키를 서버에 보내 서버에서 세션키를 왁인하여 저장된 정보를 응답해줍니다. 쿠키를 사용하면 사용자나 시스템이 들여다 볼수도 있기 때문에, 중요한 정보를 담지 못합니다. 하지만 세션을 사용하면 저장소가 서버에 있기 때문에, 어떤 정보도 세션에 담아둘 수 있는 장점이 있습니다.(단 서버가 힘들어 하겠죠?) Spring에서 session을 사용하는 법을 익혀봅시다. @Controller @SessionAttributes(&quot;user&quot;) public class ReservationController { @GetMapping(path = &quot;/myreservation&quot;) public String renderMyReservationPage(@ModelAttribute(&quot;user&quot;) User user, ModelMap modelMap) { user의 email을 참조해 reservation_info검색! } @ModelAttribute(&quot;user&quot;) public User setUser() { return new User(); } } 첫 번째로 다음과 같이 컨트롤러에 @SessionAttributes annotation을 추가하여 줍니다. @SessionAttributes 파라미터로 지정된 이름과 같은 이름이 @ModelAttribute에 지정되어 있을 경우 메소드가 반환되는 값은 세션에 저장됩니다. 이후 다른 함수에서 @ModelAttribute를 parameter로 사용하면 session에서 해당 이름을 가진 객체를 가져와 사용할 수 있습니다.(간단하죠?) 함수 내 parameter로 @ModelAttribute대신 @SessionAttribute를 사용할 수도 있습니다. 개인적으로 강의 중에 배운 인터셉터나 아규먼트 리졸버도 공부한 만큼 사용해보고 싶었는데 프로젝트의 기획서나 명세에 없어서 아쉬웠습니다. 다음에 도전할 기회가 있었으면 좋겠습니당.~~~</summary></entry><entry><title type="html">부스트 코스(웹) PROJ4-2</title><link href="https://changgunyee.github.io/boost-course/2019/08/27/boostCourse(web)-proj4-2.html" rel="alternate" type="text/html" title="부스트 코스(웹) PROJ4-2" /><published>2019-08-27T00:00:00+09:00</published><updated>2019-08-27T00:00:00+09:00</updated><id>https://changgunyee.github.io/boost-course/2019/08/27/boostCourse(web)-proj4-2</id><content type="html" xml:base="https://changgunyee.github.io/boost-course/2019/08/27/boostCourse(web)-proj4-2.html">&lt;p&gt;부스트 코스 proj4-2를 진행하였습니다.&lt;/p&gt;

&lt;p&gt;이번에는 네이버 예약 서비스 상세페이지의 프론트엔드를 개발하였습니다.&lt;br /&gt;
개발해야하는 파트는 총 3부분으로 display item의 정보를 보여주는 메인 상세페이지와 해당 display item의 모든 한줄평을 볼 수 있는 한줄평 상세페이지 그리고 메인 상세페이지 상단의 타이틀영역 배경이미지 슬라이딩입니다.&lt;/p&gt;

&lt;h2 id=&quot;메인-상세페이지detail-view와-한줄평-상세페이지comment-view&quot;&gt;메인 상세페이지(detail view)와 한줄평 상세페이지(comment view)&lt;/h2&gt;

&lt;p&gt;메인 페이지에서 display item을 선택하면 해당 item의 메인 상세페이지로 이동하게 됩니다. 이때 data를 상세페이지에 렌더링합니다.&lt;br /&gt;
원래 렌더링을 순수하고 javascript만 사용해서 하였었습니다. 하지만 리뷰어님께서 Spring MVC를 배우는 과정이니 jsp를 쓰라고 말씀해주셔서 proj3-2까지 다 jsp로 수정하였습니다.&lt;/p&gt;

&lt;p&gt;이번 과정에 EL과 JSTL의 강의도 있었던 만큼, 적극적으로 EL과 JSTL을 사용하였습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;EL(expression language)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;EL을 사용하면 좀 더 편리하게 변수를 JSP에서 사용할 수 있습니다.&lt;br /&gt;
기본 사용법은 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-08-27/el.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;특히 객체안의 멤버 변수에 접근할 때에도 &lt;code class=&quot;highlighter-rouge&quot;&gt;${&amp;lt;표현1&amp;gt;.&amp;lt;표현2&amp;gt;}&lt;/code&gt;와 같이 바로 접근할 수 있을 만큼 편리합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;JSTL(JSP standard tag library)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;프론트 개발자가 JSP를 수정하는데, JSP 안에 자바코드와 HTML코드가 섞여 있다면 수정할 때 굉장히 어려움을 느끼게 될 가능성이 큽니다.&lt;br /&gt;
이런 문제를 해결하기 위해서 등장한 것이 JSTL입니다.&lt;br /&gt;
JSTL을 이용하면 태그형식으로 조건문, 반복문 등을 사용할 수 있습니다.&lt;br /&gt;
그리고, 앞에서 배운 EL과 연동하면 더욱 강력하게 사용 가능합니다.&lt;/p&gt;

&lt;div class=&quot;language-jsp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;%@ taglib &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prefix=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt; uri=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://java.sun.com/jsp/jstl/core&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 jsp파일에 가장 주로 쓰는 core library tag를 추가하고 아래와 같이 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-08-27/jstl.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;core taglibrary뿐만 아니라 다양한 jstl tag를 사용할 수 있는데 이번에 평균 출력시 소수점 1자리까지만 출력해야하고, 날짜를 &lt;code class=&quot;highlighter-rouge&quot;&gt;2019.01.29&lt;/code&gt;와 같이 출력해야하기 때문에 fmt library를 사용하였습니다.&lt;/p&gt;

&lt;p&gt;밑과 같이 사용하였습니다.&lt;/p&gt;

&lt;div class=&quot;language-jsp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;%@ taglib &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prefix=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt; uri=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://java.sun.com/jsp/jstl/fmt&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;fmt:formatNumber &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;averageScore&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt; pattern=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/fmt:formatNumber&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;fmt:formatDate &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reservationDate&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt; pattern=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyy.MM.dd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/fmt:formatDate&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 EL과 JSTL을 사용하여 detail.jsp와 comment.jsp를 구성하였습니다.&lt;br /&gt;
또한 펼쳐보기도 JS와 css class를 사용하여 클릭하면 close class를 추가, 삭제하는 방식으로 구현하였고 상세정보와 오시는길 탭 또한 버블링을 이용하여 클릭 시 렌더링해주었습니다.&lt;/p&gt;

&lt;h2 id=&quot;타이틀영역-배경이미지-슬라이딩&quot;&gt;타이틀영역 배경이미지 슬라이딩&lt;/h2&gt;

&lt;p&gt;슬라이딩 구현시 원래는 css의 animation을 사용하여 구현하였으나 평가 기준표에 transform과 translate를 사용하라고 하여 고생하였습니다.ㅠㅠ&lt;br /&gt;
특히 css의 left와 transform 속성을 잘 조절해주어야 하는데, 그럴려면 어쩔수없이 &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout()&lt;/code&gt;을 사용할 수 밖에 없었습니다.(&lt;strong&gt;맞는건지 모르겠습니다&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;시현 결과입니당.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-08-27/simulation.gif&quot; style=&quot;width:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;프로젝트를 통과한 모습입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-08-27/complete.png&quot; /&gt;&lt;/p&gt;</content><author><name>이창권</name></author><summary type="html">부스트 코스 proj4-2를 진행하였습니다. 이번에는 네이버 예약 서비스 상세페이지의 프론트엔드를 개발하였습니다. 개발해야하는 파트는 총 3부분으로 display item의 정보를 보여주는 메인 상세페이지와 해당 display item의 모든 한줄평을 볼 수 있는 한줄평 상세페이지 그리고 메인 상세페이지 상단의 타이틀영역 배경이미지 슬라이딩입니다. 메인 상세페이지(detail view)와 한줄평 상세페이지(comment view) 메인 페이지에서 display item을 선택하면 해당 item의 메인 상세페이지로 이동하게 됩니다. 이때 data를 상세페이지에 렌더링합니다. 원래 렌더링을 순수하고 javascript만 사용해서 하였었습니다. 하지만 리뷰어님께서 Spring MVC를 배우는 과정이니 jsp를 쓰라고 말씀해주셔서 proj3-2까지 다 jsp로 수정하였습니다. 이번 과정에 EL과 JSTL의 강의도 있었던 만큼, 적극적으로 EL과 JSTL을 사용하였습니다. EL(expression language) EL을 사용하면 좀 더 편리하게 변수를 JSP에서 사용할 수 있습니다. 기본 사용법은 다음과 같습니다. 특히 객체안의 멤버 변수에 접근할 때에도 ${&amp;lt;표현1&amp;gt;.&amp;lt;표현2&amp;gt;}와 같이 바로 접근할 수 있을 만큼 편리합니다. JSTL(JSP standard tag library) 프론트 개발자가 JSP를 수정하는데, JSP 안에 자바코드와 HTML코드가 섞여 있다면 수정할 때 굉장히 어려움을 느끼게 될 가능성이 큽니다. 이런 문제를 해결하기 위해서 등장한 것이 JSTL입니다. JSTL을 이용하면 태그형식으로 조건문, 반복문 등을 사용할 수 있습니다. 그리고, 앞에서 배운 EL과 연동하면 더욱 강력하게 사용 가능합니다. &amp;lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&amp;gt; 위와 같이 jsp파일에 가장 주로 쓰는 core library tag를 추가하고 아래와 같이 사용할 수 있습니다. core taglibrary뿐만 아니라 다양한 jstl tag를 사용할 수 있는데 이번에 평균 출력시 소수점 1자리까지만 출력해야하고, 날짜를 2019.01.29와 같이 출력해야하기 때문에 fmt library를 사용하였습니다. 밑과 같이 사용하였습니다. &amp;lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; %&amp;gt; &amp;lt;fmt:formatNumber value=&quot;${averageScore}&quot; pattern=&quot;.0&quot;&amp;gt;&amp;lt;/fmt:formatNumber&amp;gt; &amp;lt;fmt:formatDate value=&quot;${comment.reservationDate}&quot; pattern=&quot;yyyy.MM.dd&quot;&amp;gt;&amp;lt;/fmt:formatDate&amp;gt; 위와 같이 EL과 JSTL을 사용하여 detail.jsp와 comment.jsp를 구성하였습니다. 또한 펼쳐보기도 JS와 css class를 사용하여 클릭하면 close class를 추가, 삭제하는 방식으로 구현하였고 상세정보와 오시는길 탭 또한 버블링을 이용하여 클릭 시 렌더링해주었습니다. 타이틀영역 배경이미지 슬라이딩 슬라이딩 구현시 원래는 css의 animation을 사용하여 구현하였으나 평가 기준표에 transform과 translate를 사용하라고 하여 고생하였습니다.ㅠㅠ 특히 css의 left와 transform 속성을 잘 조절해주어야 하는데, 그럴려면 어쩔수없이 setTimeout()을 사용할 수 밖에 없었습니다.(맞는건지 모르겠습니다) 시현 결과입니당. 프로젝트를 통과한 모습입니다.</summary></entry><entry><title type="html">부스트 코스(웹) PROJ4-1</title><link href="https://changgunyee.github.io/boost-course/2019/08/20/boostCourse(web)-proj4-1.html" rel="alternate" type="text/html" title="부스트 코스(웹) PROJ4-1" /><published>2019-08-20T00:00:00+09:00</published><updated>2019-08-20T00:00:00+09:00</updated><id>https://changgunyee.github.io/boost-course/2019/08/20/boostCourse(web)-proj4-1</id><content type="html" xml:base="https://changgunyee.github.io/boost-course/2019/08/20/boostCourse(web)-proj4-1.html">&lt;p&gt;부스트 코스 proj4-1를 진행하였습니다.&lt;/p&gt;

&lt;p&gt;개발해야하는 파트는 네이버 예약 서비스의 상세 페이지의 백엔드 파트였습니다.&lt;br /&gt;
개발해야하는 기능은 상품에 대한 상세 페이지인 main view와 상품에 대한 한줄평을 볼 수 있는 comment view와 상품에 대한 displayInfo를 구할 수 있는 api를 만드는 것으로 총 3가지 였습니다.&lt;/p&gt;

&lt;h3 id=&quot;displayinfo-apiapiproductsdisplayinfoid&quot;&gt;displayInfo api(&lt;code class=&quot;highlighter-rouge&quot;&gt;/api/products/{displayInfoId}&lt;/code&gt;)&lt;/h3&gt;

&lt;p&gt;displayInfo api에는 많은 정보가 들어 있습니다.&lt;br /&gt;
spring MVC에 따라 개발해야 보겠습니다. dto -&amp;gt; dao -&amp;gt; service -&amp;gt; controller&lt;br /&gt;
model(dto)을 구성해야 하므로 이에 따라 만든 model 목록입니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Comment&lt;/li&gt;
  &lt;li&gt;CommentImage&lt;/li&gt;
  &lt;li&gt;DisplayInfo&lt;/li&gt;
  &lt;li&gt;DisplayInfoImage&lt;/li&gt;
  &lt;li&gt;ProductImage&lt;/li&gt;
  &lt;li&gt;ProductPrice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사용한 테이블들 입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-08-20/erd.png&quot; style=&quot;width:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;꽤 많았습니다.(&lt;del&gt;사실 너무 많았….&lt;/del&gt;)&lt;/p&gt;

&lt;p&gt;데이터 베이스의 테이블을 이용해 위의 모델 객체를 만들 수 있게 도와주는 dao가 있어야 됩니다.&lt;br /&gt;
각 모델이 가지고 있는 속성에 따라 필요한 테이블을 join해서 모델 객체를 만들어 주어야 합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;DisplayInfo : public DisplayInfo selectDisplayInfo(Integer displayInfoId)&lt;/li&gt;
  &lt;li&gt;DisplayInfoImage : public DisplayInfoImage selectDisplayInfoImage(Integer displayInfoId)&lt;/li&gt;
  &lt;li&gt;Comments : public List&lt;Comment&gt; selectComments(Integer displayInfoId)&lt;/Comment&gt;&lt;/li&gt;
  &lt;li&gt;CommentImages : public List&lt;CommentImage&gt; selectCommentImages(Integer reservationUserCommentId)&lt;/CommentImage&gt;&lt;/li&gt;
  &lt;li&gt;ProductImages : public List&lt;ProductImage&gt; selectProductImages(Integer productId)&lt;/ProductImage&gt;&lt;/li&gt;
  &lt;li&gt;ProductPrices : public List&lt;ProductPrice&gt; selectProductPrices(Integer productId)&lt;/ProductPrice&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위의 함수들로 객체를 생성합니다. 현재 조회하는 기능만 있으면 되므로 수정, 삭제 기능을 담당하는 함수는 만들지 않았습니다.&lt;/p&gt;

&lt;p&gt;자 이제 service차례입니다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDetailDisplayInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;displayInfoId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;displayInfo&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;가져오기&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//selectDisplayInfo&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;displayInfoImage&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;가져오기&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//selectDisplayInfoImage&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;productImages&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;가져오기&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//selectProductImages&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;productPrices&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;가져오기&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//selectProductPrices&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;comments&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;가져오기&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//selectComments&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;각&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;의&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;에&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;맞는&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commentImage&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;가져오기&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//selectCommentImages&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;@Transactional annotation을 사용하면 함수가 실행되거나, 중간에 문제가 생기면 아예 함수를 실행하기 전으로 rollback하게끔 도와줍니다.&lt;/p&gt;

&lt;p&gt;이번 과제 명세 중 하나가 사용자 email을 &lt;code class=&quot;highlighter-rouge&quot;&gt;dkwo****&lt;/code&gt;와 같은 형식으로 표현하는 것이였는데, 저는 프론트에서 해결하였었습니다. 하지만 리뷰어님께서 보통 많은 페이지들에서 이메일을 저런 식으로 표현해야하기 때문에 프론트마다 코드를 만들기 보다도 백엔드에서 처리해주어 처리 포인트를 1개롤 모으는 것이 보통이라고 하셨습니다. 따라서 comment마다 commentImages를 가져올 때, comment의 이메일 형식도 바꿔주는 것으로 바꾸고 프론트는 단순 출력만 하게 수정하였습니다.(또 하나 배웠습니다. 크흡…..)&lt;/p&gt;

&lt;p&gt;서버를 실행하고, postman에서 api url에 요청해본 결과입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-08-20/api.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;상세-페이지main-view&quot;&gt;상세 페이지(main view)&lt;/h3&gt;

&lt;p&gt;위의 displayInfo api에서 controller를 제외한 mvc모델을 다 만들어 놨기 때문에, 상세 페이지와 한줄평 페이지 view는 굉장히 간단해 졌습니다.&lt;br /&gt;
service의 getDetailDisplayInfo함수를 이용해 필요한 정보를 받아와 modelMap객체를 통해 detail.jsp에 넘겨 줍니다.&lt;br /&gt;
대략적인 코드는 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/detail&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DetailController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;renderDetailPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;displayInfoId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModelMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;getDetailDisplayInfo&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;호출&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;modelMap&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;에&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;displayInfo&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;주입&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;detail&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;한줄평-페이지comment-view&quot;&gt;한줄평 페이지(comment view)&lt;/h3&gt;

&lt;p&gt;상세 페이지와 비슷합니다. getDetailDisplayInfo를 이용하면 불필요한 정보까지 받아오므로 비효율적입니다. 따라서 추가적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;getDetailComments()&lt;/code&gt;함수를 만들어 주었습니다.&lt;br /&gt;
이 데이터 또한 modelMap객체를 통해 comment.jsp에 넘겨줍니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/comment&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommentController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;renderCommentPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;displayInfoId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModelMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;getDetailComments&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;호출&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;modelMap&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;에&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comments&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;주입&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;comment&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;새롭게-배운-점&quot;&gt;새롭게 배운 점&lt;/h3&gt;

&lt;p&gt;spring MVC에서 view를 넣으려면 jsp파일을 만들고, controller도 만들어야 되죠.&lt;br /&gt;
원하는 url에 view하나 넣을 때마다 controller를 만들어 넣어야하는 건 굉장히 부담스러운 일입니다.&lt;br /&gt;
원하는 url에 정적인 페이지를 넣고 싶을 때는 WebMvcConfigurerAdapter클래스의 addViewControllers를 override해서 간단하게 view를 등록할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableWebMvc&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ComponentScan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basePackages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kr.or.connect.mavenweb.controller&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebMvcContextConfiguration&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebMvcConfigurerAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configureDefaultServletHandling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DefaultServletHandlerConfigurer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configurer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;configurer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addViewControllers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewControllerRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;addViewControllers가 호출됩니다. &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addViewController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setViewName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;사실 이 configure부분이 서버에 대한 이해도가 낮으면 굉장히 코드 한줄 한줄을 이해하기가 힘듭니다.&lt;br /&gt;
조금이라도 분석을 해봅시다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer)&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;기본적으로 설정은 DispatcherServlet이 읽어 들입니다.&lt;/li&gt;
      &lt;li&gt;url요청이 들어왔을 때, DefaultServletHttpRequestHandler가 원래 처리합니다.&lt;/li&gt;
      &lt;li&gt;위와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;configurer.enable()&lt;/code&gt;로 configurer를 허용해주면, mapping이 없는 URL요청이 들어왔을 때 DefaultServletHttpRequestHandler가 요청을 DefaultServletHandler에 넘기게 되고 DefaultServletHandler는 WAS의 static한 자원을 읽어서 보여줍니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;addViewControllers(final ViewControllerRegistry registry)&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;ViewControllerRegistry객체를 이용해 특정 URL에 대한 처리를 controller없이 할 수 있습니다.&lt;/li&gt;
      &lt;li&gt;위와 같이 registry에 &lt;code class=&quot;highlighter-rouge&quot;&gt;addViewController()&lt;/code&gt; 함수를 이용하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; URL에 index라는 view를 보여줄 수 있게됩니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;프로젝트 완료한 모습입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-08-20/complete.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;#부스트코스&lt;/p&gt;</content><author><name>이창권</name></author><summary type="html">부스트 코스 proj4-1를 진행하였습니다. 개발해야하는 파트는 네이버 예약 서비스의 상세 페이지의 백엔드 파트였습니다. 개발해야하는 기능은 상품에 대한 상세 페이지인 main view와 상품에 대한 한줄평을 볼 수 있는 comment view와 상품에 대한 displayInfo를 구할 수 있는 api를 만드는 것으로 총 3가지 였습니다. displayInfo api(/api/products/{displayInfoId}) displayInfo api에는 많은 정보가 들어 있습니다. spring MVC에 따라 개발해야 보겠습니다. dto -&amp;gt; dao -&amp;gt; service -&amp;gt; controller model(dto)을 구성해야 하므로 이에 따라 만든 model 목록입니다. Comment CommentImage DisplayInfo DisplayInfoImage ProductImage ProductPrice 사용한 테이블들 입니다. 꽤 많았습니다.(사실 너무 많았….) 데이터 베이스의 테이블을 이용해 위의 모델 객체를 만들 수 있게 도와주는 dao가 있어야 됩니다. 각 모델이 가지고 있는 속성에 따라 필요한 테이블을 join해서 모델 객체를 만들어 주어야 합니다. DisplayInfo : public DisplayInfo selectDisplayInfo(Integer displayInfoId) DisplayInfoImage : public DisplayInfoImage selectDisplayInfoImage(Integer displayInfoId) Comments : public List selectComments(Integer displayInfoId) CommentImages : public List selectCommentImages(Integer reservationUserCommentId) ProductImages : public List selectProductImages(Integer productId) ProductPrices : public List selectProductPrices(Integer productId) 위의 함수들로 객체를 생성합니다. 현재 조회하는 기능만 있으면 되므로 수정, 삭제 기능을 담당하는 함수는 만들지 않았습니다. 자 이제 service차례입니다. @Override @Transactional public Map&amp;lt;String, Object&amp;gt; getDetailDisplayInfo(Integer displayInfoId) { displayInfo가져오기//selectDisplayInfo displayInfoImage가져오기//selectDisplayInfoImage productImages가져오기//selectProductImages productPrices가져오기//selectProductPrices comments가져오기//selectComments 각 comment의 id에 맞는 commentImage가져오기//selectCommentImages } @Transactional annotation을 사용하면 함수가 실행되거나, 중간에 문제가 생기면 아예 함수를 실행하기 전으로 rollback하게끔 도와줍니다. 이번 과제 명세 중 하나가 사용자 email을 dkwo****와 같은 형식으로 표현하는 것이였는데, 저는 프론트에서 해결하였었습니다. 하지만 리뷰어님께서 보통 많은 페이지들에서 이메일을 저런 식으로 표현해야하기 때문에 프론트마다 코드를 만들기 보다도 백엔드에서 처리해주어 처리 포인트를 1개롤 모으는 것이 보통이라고 하셨습니다. 따라서 comment마다 commentImages를 가져올 때, comment의 이메일 형식도 바꿔주는 것으로 바꾸고 프론트는 단순 출력만 하게 수정하였습니다.(또 하나 배웠습니다. 크흡…..) 서버를 실행하고, postman에서 api url에 요청해본 결과입니다. 상세 페이지(main view) 위의 displayInfo api에서 controller를 제외한 mvc모델을 다 만들어 놨기 때문에, 상세 페이지와 한줄평 페이지 view는 굉장히 간단해 졌습니다. service의 getDetailDisplayInfo함수를 이용해 필요한 정보를 받아와 modelMap객체를 통해 detail.jsp에 넘겨 줍니다. 대략적인 코드는 다음과 같습니다. @Controller @RequestMapping(path = &quot;/detail&quot;) public class DetailController { @GetMapping public String renderDetailPage(@RequestParam(name = &quot;id&quot;) int displayInfoId, ModelMap modelMap) { getDetailDisplayInfo호출 modelMap에 displayInfo주입 return &quot;detail&quot;; } } 한줄평 페이지(comment view) 상세 페이지와 비슷합니다. getDetailDisplayInfo를 이용하면 불필요한 정보까지 받아오므로 비효율적입니다. 따라서 추가적으로 getDetailComments()함수를 만들어 주었습니다. 이 데이터 또한 modelMap객체를 통해 comment.jsp에 넘겨줍니다. @Controller @RequestMapping(path = &quot;/comment&quot;) public class CommentController { @GetMapping public String renderCommentPage(@RequestParam(name = &quot;id&quot;) int displayInfoId, ModelMap modelMap) { getDetailComments호출 modelMap에 comments주입 return &quot;comment&quot;; } } 새롭게 배운 점 spring MVC에서 view를 넣으려면 jsp파일을 만들고, controller도 만들어야 되죠. 원하는 url에 view하나 넣을 때마다 controller를 만들어 넣어야하는 건 굉장히 부담스러운 일입니다. 원하는 url에 정적인 페이지를 넣고 싶을 때는 WebMvcConfigurerAdapter클래스의 addViewControllers를 override해서 간단하게 view를 등록할 수 있습니다. @Configuration @EnableWebMvc @ComponentScan(basePackages = {&quot;kr.or.connect.mavenweb.controller&quot;}) public class WebMvcContextConfiguration extends WebMvcConfigurerAdapter { @Override public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) { configurer.enable(); } @Override public void addViewControllers(final ViewControllerRegistry registry) { System.out.println(&quot;addViewControllers가 호출됩니다. &quot;); registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;); } } 사실 이 configure부분이 서버에 대한 이해도가 낮으면 굉장히 코드 한줄 한줄을 이해하기가 힘듭니다. 조금이라도 분석을 해봅시다. configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) 기본적으로 설정은 DispatcherServlet이 읽어 들입니다. url요청이 들어왔을 때, DefaultServletHttpRequestHandler가 원래 처리합니다. 위와 같이 configurer.enable()로 configurer를 허용해주면, mapping이 없는 URL요청이 들어왔을 때 DefaultServletHttpRequestHandler가 요청을 DefaultServletHandler에 넘기게 되고 DefaultServletHandler는 WAS의 static한 자원을 읽어서 보여줍니다. addViewControllers(final ViewControllerRegistry registry) ViewControllerRegistry객체를 이용해 특정 URL에 대한 처리를 controller없이 할 수 있습니다. 위와 같이 registry에 addViewController() 함수를 이용하면 / URL에 index라는 view를 보여줄 수 있게됩니다. 프로젝트 완료한 모습입니다. #부스트코스</summary></entry><entry><title type="html">부스트 코스(웹) PROJ3-2</title><link href="https://changgunyee.github.io/boost-course/2019/08/12/boostCourse(web)-proj3-2.html" rel="alternate" type="text/html" title="부스트 코스(웹) PROJ3-2" /><published>2019-08-12T00:00:00+09:00</published><updated>2019-08-12T00:00:00+09:00</updated><id>https://changgunyee.github.io/boost-course/2019/08/12/boostCourse(web)-proj3-2</id><content type="html" xml:base="https://changgunyee.github.io/boost-course/2019/08/12/boostCourse(web)-proj3-2.html">&lt;p&gt;부스트 코스 proj3-2를 진행하였습니다.&lt;/p&gt;

&lt;p&gt;proj3-1이 예약 서비스의 백엔드 파트였다면, 이번 프로젝트는 네이버 예약 서비스 메인 페이지의 프론트 엔드 부분을 개발하였습니다.&lt;/p&gt;

&lt;p&gt;개발해야하는 기능은 크게 3가지였습니다.&lt;/p&gt;

&lt;h3 id=&quot;프로모션-영역슬라이딩-이미지&quot;&gt;프로모션 영역(슬라이딩 이미지)&lt;/h3&gt;

&lt;p&gt;세부 주요 기준으로&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프로모션영역의 이미지는 1개보다 많으며, 자동으로 슬라이딩되어 넘어간다.&lt;/li&gt;
  &lt;li&gt;슬라이딩 이미지는 애니메이션이 되면서 좌측으로 이동하는 것이 보여야한다.&lt;/li&gt;
  &lt;li&gt;마지막 이미지에 다다르면 처음것이 그 다음으로 노출되야 한다. 마지막것에서 처음내용이 다시 보이는 부분은 끊겨서 노출되도 상관 없으며, 중요한 건 다시 처음부터 슬라이딩이 계속 되야 한다는 것이다. (엄격하진 않지만 최대한 자연스럽게 동작하려고 해야 한다)&lt;/li&gt;
  &lt;li&gt;상단영역의 애니메이션은 CSS3의 transition과 transform 속성을 JavaScript로 제어하면서 구현해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사실 jQuery에 슬라이더 플러그인이 굉장히 많이 있죠&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Draggable Dual-View Slideshow&lt;/li&gt;
  &lt;li&gt;Swiper&lt;/li&gt;
  &lt;li&gt;slick&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;플러그인이나 라이브러리를 가져다 쓰는 것도 좋지만, javascript와 css에 익숙해지는데 라이브러리를 실제 구현해 보는 것만큼 좋은 것도 없다고 생각합니다.&lt;/p&gt;

&lt;h3 id=&quot;카테고리노출영역탭ui&quot;&gt;카테고리노출영역(탭UI)&lt;/h3&gt;

&lt;p&gt;세부 주요 기준으로&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;전체리스트가 Ajax를 통해서 화면에 4개의 아이템이 노출된다.&lt;/li&gt;
  &lt;li&gt;탭별로 전체갯수가 상단에 노출되야 한다.&lt;/li&gt;
  &lt;li&gt;각 아이템(전시상품)은 이미지/제목/장소/설명이 노출되야 한다.&lt;/li&gt;
  &lt;li&gt;탭을 누르면 다른 카테고리 콘텐츠 4개가 다시 노출된다.&lt;/li&gt;
  &lt;li&gt;더보기를 누르면 4개씩 노출되야 한다. 4개보다 적으면 적은 만큼 노출되야 한다.&lt;/li&gt;
  &lt;li&gt;더보여줄 데이터가 없다면 더보기는 사라진다.&lt;/li&gt;
  &lt;li&gt;카테고리 탭을 선택할 때마다, Ajax요청을 해서 데이터를 가져와야 한다.&lt;/li&gt;
  &lt;li&gt;탭메뉴 (전시/뮤지컬/콘서트 등)는 Event delegation으로 구현한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;세부 기준 중, 첫번째 중요한 부분은 &lt;code class=&quot;highlighter-rouge&quot;&gt;카테고리 탭을 선택할 때마다, Ajax요청을 해서 테이터를 가져와야 한다.&lt;/code&gt;는 부분입니다.&lt;/p&gt;

&lt;p&gt;브라우저의 새로고침 없이 데이터를 얻어오는 더 좋은 UX를 제공하는 방법으로 비동기(ajax)를 통해 필요한 부분만(페이지의 일부분)을 새로 렌더링하는 방법이 있습니다.&lt;/p&gt;

&lt;p&gt;Ajax사용법&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Vanillar JS&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oReq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            
      &lt;span class=&quot;nx&quot;&gt;oReq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            
      &lt;span class=&quot;nx&quot;&gt;oReq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://www.example.org/example.txt&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;oReq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;jQuery&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;loldog&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Axios(최근 가장 많이 쓰는 형태)&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://www.example.org/example.txt&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사실 이 중, axios와  async, await 결합해서 가장 많이 씁니다.&lt;/p&gt;

&lt;p&gt;비동기적인 코드를 동기적인 코드로 쓸 수 있어 개발 속도도 굉장히 빠르고 가독성도 좋기 때문입니다.&lt;/p&gt;

&lt;p&gt;그래도 배우는 시간인 만큼 XMLHttpRequest객체를 이용해서 개발을 진행하였습니다.&lt;/p&gt;

&lt;p&gt;세부 기준중, 두번재로 중요한 부분은 &lt;code class=&quot;highlighter-rouge&quot;&gt;탭메뉴 (전시/뮤지컬/콘서트 등)는 Event delegation으로 구현한다.&lt;/code&gt;입니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://images-na.,,,,,/513hgbYgL._AC_SY400_.jpg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;product-image&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://images-n,,,,,/41HoczB2L._AC_SY400_.jpg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;product-image&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://images-na.,,,,51AEisFiL._AC_SY400_.jpg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;product-image&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://images-na,,,,/51JVpV3ZL._AC_SY400_.jpg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;product-image&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ul&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 위와 같은 &amp;lt;li&amp;gt;태그 하나하나에 이벤트를 걸여야 한다면 어떨까요? 심지어 &amp;lt;li&amp;gt;가 100개로 늘어난다면? 동적으로 &amp;lt;li&amp;gt;를 만들어 줘야하는 상황이라면?&lt;/p&gt;

&lt;p&gt;매번 이벤트를 걸어줘야 한다면 브라우저도 감당하기 힘들뿐더러, 코드도 굉장히 비효율적일 것입니다.&lt;/p&gt;

&lt;p&gt;하지만 &amp;lt;ul&amp;gt;태그 하나에만 이벤트를 걸어주고 &lt;code class=&quot;highlighter-rouge&quot;&gt;event bubbling&lt;/code&gt;을 사용하면 단번에 해결 가능합니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드를 실행시킨 다음 &amp;lt;img&amp;gt;,&amp;lt;li&amp;gt;를 클릭해도 이벤트가 실행됩니다.&lt;/p&gt;

&lt;p&gt;&amp;lt;img&amp;gt;,&amp;lt;li&amp;gt;태그 모두 &amp;lt;ul&amp;gt;에 속하는 태그이기도 하기 때문입니다.&lt;/p&gt;

&lt;p&gt;이것을 이벤트 버블링이라고 합니다.&lt;/p&gt;

&lt;p&gt;클릭한 지점이 하위엘리먼트라고 하여도, 그것을 감싸고 있는 상위 엘리먼트까지 올라가면서 이벤트리스너가 있는지 찾는 과정입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-08-12/event_bubbling.jpg&quot; style=&quot;width:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이를 이용한다면 예약 서비스의 탭메뉴 하나하나에 이벤트를 걸어주지 않아도 상위 태그 하나에만 이벤트를 걸어주는 형식으로 처리가 가능합니다.&lt;/p&gt;

&lt;h3 id=&quot;html-templating&quot;&gt;HTML templating&lt;/h3&gt;

&lt;p&gt;사실 이부분 개발을 어떻게 해야하나? jsp를 배운김에 jsp를 써야하나? 그냥 javascript로 구현을 해야하나? 고민 끝에 그냥 javascript로 구현하기로 하였습니다.&lt;/p&gt;

&lt;p&gt;물론 아직까지 jsp로 개발된 사이트들이 많지만, 최근에 javascript를 이용한 프레임워크(React, Vue)등이 인기가 많아지기도 하였고 template언어의 인기가 떡락하고 있기 때문에 그냥 javascript로 하였습니다.&lt;/p&gt;

&lt;p&gt;저의 경우에는 node.js의 template언어인 ejs를 써봤었는데, 너무 옛날 언어 같다는 느낌을 많이 받은 것도 영향이 있었던 것 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;rv-template&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;itemList&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/htmls/detail.html?id=${id}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;item_book&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//response data에서 id를 받아 replace함수를 통해 ${id}를 교체&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;html파일 내에 위와같이 script형태로 template을 보관한 후, ajax를 통해 받은 response data를 해당 template에 렌더링하는 형식으로 구현하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-08-12/review_result.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;끝입니다.~~~~~~~&lt;/p&gt;</content><author><name>이창권</name></author><summary type="html">부스트 코스 proj3-2를 진행하였습니다. proj3-1이 예약 서비스의 백엔드 파트였다면, 이번 프로젝트는 네이버 예약 서비스 메인 페이지의 프론트 엔드 부분을 개발하였습니다. 개발해야하는 기능은 크게 3가지였습니다. 프로모션 영역(슬라이딩 이미지) 세부 주요 기준으로 프로모션영역의 이미지는 1개보다 많으며, 자동으로 슬라이딩되어 넘어간다. 슬라이딩 이미지는 애니메이션이 되면서 좌측으로 이동하는 것이 보여야한다. 마지막 이미지에 다다르면 처음것이 그 다음으로 노출되야 한다. 마지막것에서 처음내용이 다시 보이는 부분은 끊겨서 노출되도 상관 없으며, 중요한 건 다시 처음부터 슬라이딩이 계속 되야 한다는 것이다. (엄격하진 않지만 최대한 자연스럽게 동작하려고 해야 한다) 상단영역의 애니메이션은 CSS3의 transition과 transform 속성을 JavaScript로 제어하면서 구현해야 한다. 사실 jQuery에 슬라이더 플러그인이 굉장히 많이 있죠 Draggable Dual-View Slideshow Swiper slick 플러그인이나 라이브러리를 가져다 쓰는 것도 좋지만, javascript와 css에 익숙해지는데 라이브러리를 실제 구현해 보는 것만큼 좋은 것도 없다고 생각합니다. 카테고리노출영역(탭UI) 세부 주요 기준으로 전체리스트가 Ajax를 통해서 화면에 4개의 아이템이 노출된다. 탭별로 전체갯수가 상단에 노출되야 한다. 각 아이템(전시상품)은 이미지/제목/장소/설명이 노출되야 한다. 탭을 누르면 다른 카테고리 콘텐츠 4개가 다시 노출된다. 더보기를 누르면 4개씩 노출되야 한다. 4개보다 적으면 적은 만큼 노출되야 한다. 더보여줄 데이터가 없다면 더보기는 사라진다. 카테고리 탭을 선택할 때마다, Ajax요청을 해서 데이터를 가져와야 한다. 탭메뉴 (전시/뮤지컬/콘서트 등)는 Event delegation으로 구현한다. 세부 기준 중, 첫번째 중요한 부분은 카테고리 탭을 선택할 때마다, Ajax요청을 해서 테이터를 가져와야 한다.는 부분입니다. 브라우저의 새로고침 없이 데이터를 얻어오는 더 좋은 UX를 제공하는 방법으로 비동기(ajax)를 통해 필요한 부분만(페이지의 일부분)을 새로 렌더링하는 방법이 있습니다. Ajax사용법 Vanillar JS function ajax() { var oReq = new XMLHttpRequest(); oReq.addEventListener(&quot;load&quot;, function() { console.log(this.responseText); }); oReq.open(&quot;GET&quot;, &quot;http://www.example.org/example.txt&quot;); oReq.send(); } jQuery function ajax(){ $.post('loldog',(response)=&amp;gt;{ console.log(response); } } Axios(최근 가장 많이 쓰는 형태) async function ajax(){ var response=await axios.get('http://www.example.org/example.txt') console.log(response); } 사실 이 중, axios와 async, await 결합해서 가장 많이 씁니다. 비동기적인 코드를 동기적인 코드로 쓸 수 있어 개발 속도도 굉장히 빠르고 가독성도 좋기 때문입니다. 그래도 배우는 시간인 만큼 XMLHttpRequest객체를 이용해서 개발을 진행하였습니다. 세부 기준중, 두번재로 중요한 부분은 탭메뉴 (전시/뮤지컬/콘서트 등)는 Event delegation으로 구현한다.입니다. &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt; &amp;lt;img src=&quot;https://images-na.,,,,,/513hgbYgL._AC_SY400_.jpg&quot; class=&quot;product-image&quot; &amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;img src=&quot;https://images-n,,,,,/41HoczB2L._AC_SY400_.jpg&quot; class=&quot;product-image&quot; &amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;img src=&quot;https://images-na.,,,,51AEisFiL._AC_SY400_.jpg&quot; class=&quot;product-image&quot; &amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;img src=&quot;https://images-na,,,,/51JVpV3ZL._AC_SY400_.jpg&quot; class=&quot;product-image&quot; &amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; 만약 위와 같은 &amp;lt;li&amp;gt;태그 하나하나에 이벤트를 걸여야 한다면 어떨까요? 심지어 &amp;lt;li&amp;gt;가 100개로 늘어난다면? 동적으로 &amp;lt;li&amp;gt;를 만들어 줘야하는 상황이라면? 매번 이벤트를 걸어줘야 한다면 브라우저도 감당하기 힘들뿐더러, 코드도 굉장히 비효율적일 것입니다. 하지만 &amp;lt;ul&amp;gt;태그 하나에만 이벤트를 걸어주고 event bubbling을 사용하면 단번에 해결 가능합니다. ul.addEventListener(&quot;click&quot;,function(evt) { console.log(evt.currentTarget, evt.target); }); 위의 코드를 실행시킨 다음 &amp;lt;img&amp;gt;,&amp;lt;li&amp;gt;를 클릭해도 이벤트가 실행됩니다. &amp;lt;img&amp;gt;,&amp;lt;li&amp;gt;태그 모두 &amp;lt;ul&amp;gt;에 속하는 태그이기도 하기 때문입니다. 이것을 이벤트 버블링이라고 합니다. 클릭한 지점이 하위엘리먼트라고 하여도, 그것을 감싸고 있는 상위 엘리먼트까지 올라가면서 이벤트리스너가 있는지 찾는 과정입니다. 이를 이용한다면 예약 서비스의 탭메뉴 하나하나에 이벤트를 걸어주지 않아도 상위 태그 하나에만 이벤트를 걸어주는 형식으로 처리가 가능합니다. HTML templating 사실 이부분 개발을 어떻게 해야하나? jsp를 배운김에 jsp를 써야하나? 그냥 javascript로 구현을 해야하나? 고민 끝에 그냥 javascript로 구현하기로 하였습니다. 물론 아직까지 jsp로 개발된 사이트들이 많지만, 최근에 javascript를 이용한 프레임워크(React, Vue)등이 인기가 많아지기도 하였고 template언어의 인기가 떡락하고 있기 때문에 그냥 javascript로 하였습니다. 저의 경우에는 node.js의 template언어인 ejs를 써봤었는데, 너무 옛날 언어 같다는 느낌을 많이 받은 것도 영향이 있었던 것 같습니다. &amp;lt;script type=&quot;rv-template&quot; id=&quot;itemList&quot;&amp;gt; &amp;lt;li class=&quot;item&quot;&amp;gt; &amp;lt;a href=&quot;/htmls/detail.html?id=${id}&quot; class=&quot;item_book&quot;&amp;gt;//response data에서 id를 받아 replace함수를 통해 ${id}를 교체 &amp;lt;/li&amp;gt; &amp;lt;/script&amp;gt; html파일 내에 위와같이 script형태로 template을 보관한 후, ajax를 통해 받은 response data를 해당 template에 렌더링하는 형식으로 구현하였습니다. 끝입니다.~~~~~~~</summary></entry><entry><title type="html">react native로 iOS 앱 개발하고 등록하기</title><link href="https://changgunyee.github.io/develop/2019/07/20/register-ios-app.html" rel="alternate" type="text/html" title="react native로 iOS 앱 개발하고 등록하기" /><published>2019-07-20T00:00:00+09:00</published><updated>2019-07-20T00:00:00+09:00</updated><id>https://changgunyee.github.io/develop/2019/07/20/register-ios-app</id><content type="html" xml:base="https://changgunyee.github.io/develop/2019/07/20/register-ios-app.html">&lt;p&gt;react-native로 앱을 만들고 등록하는 과정중의 에러나 힘들었던 사항들을 정리하였습니다.&lt;/p&gt;

&lt;h1 id=&quot;xcode로-ios개발-시-빌드-방법error처리-포함&quot;&gt;Xcode로 iOS개발 시 빌드 방법(Error처리 포함)&lt;/h1&gt;

&lt;h2 id=&quot;build전-수행해야할-사항&quot;&gt;Build전 수행해야할 사항&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --save&lt;/code&gt; : node_modules directory생성
  (후에 pod에서 node_modules안의 파일을 건드리기 때문에 sudo는 쓰지말도록 합니다.)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native link&lt;/code&gt; : node.js패키지를 react-native에서 쓰기 위해 native code상의 필요한 부분에 코드를 주입시켜줍니다. link 명령어를 지원하지 않거나 manual한 link방법을 추천하는 패키지도 존재하므로 패키지 별로 문서를 한번 씩 읽어보는 것도 좋습니다.(현재 사용하는 패키지에서는 다 link사용 가능)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ios&lt;/code&gt;&amp;amp;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt; : node.js package를 바로 ios에서 쓰기 위해서는 패키지 관리자를 사용하여야 하는데 이것이 pod입니다. package.json=Podfile, package-lock.jso=Podfile.lock, node_modules=Pods입니다.
(Pod와 관련해서 에러가 난다면 Podfile.lock, Pods를 삭제 후, &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;을 합니다.)&lt;/li&gt;
  &lt;li&gt;이제 Xcode에서 .xcworkspace파일을 엽니다(Pod를 쓰기 때문에 .xcodeproj대신 .xcworkspace를 엽니다)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;build-시-발생하는-주요-에러&quot;&gt;Build 시 발생하는 주요 에러&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;third-party와 관련되어 에러가 날 수 있습니다.(파일이 없습니다. 어쩌구 저쩌구….)
    &lt;ul&gt;
      &lt;li&gt;third-party에서 패키지를 제대로 설치하지 못하는 모양입니다. 수동으로 해줍시다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd node_modules/react-native/third-party/glog-0.3.4&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./configure&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;&amp;amp;&lt;code class=&quot;highlighter-rouge&quot;&gt;make install&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;소스파일로 된 패키지를 설치하실 때 기본적으로 내리는 3가지 명령어가 있는데 그것이 바로
configure, make, make install 입니다.&lt;/p&gt;

&lt;p&gt;여기서 소스파일이란 것은 설치파일에 대한 소스 파일입니다.
그러므로 컴파일을 하고나면 설치파일이 생기는 것이죠. 그리고 위의 세가지 명령에 대해 알아보도록 하죠.&lt;/p&gt;

&lt;p&gt;configure 는 환경설정을 해주는 명령어입니다. 
컴파일을 할 때 어떤 옵션을 넣거나 할 때 configure 뒤에 옵션을 넣어줍니다. 
여기에 어떤 옵션이 정확히 들어간다고 말씀드릴 수 있는 것은 아니고 소스를 제작한 자가 readme 파일 등에
명시되어 있습니다.&lt;/p&gt;

&lt;p&gt;make 는 소스를 컴파일 하는 것입니다. 컴파일이란 것은 소스파일을 사용자가 실행 가능한 파일로 만들어 주는
과정을 말합니다. make 과정이 끝나고 나면 설치파일이 생성된 상태라고 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;make install 은 설치를 하는 과정입니다. 앞 과정에서 생성된 설치파일을 실행해서 설치를 끝내는 과정입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;No member named ‘__rip’ in ‘__darwin_arm_thread_state64’&lt;/strong&gt; 에러
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ucontext_t *context = reinterpret_cast&amp;lt;ucontext_t *&amp;gt;(ucontext_in_void);&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;return (void*)context-&amp;gt;PC_FROM_UCONTEXT; // &amp;lt;---- build error here&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;return NULL;&lt;/code&gt;로 code를 직접 수정해줍니다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;앱-등록시-reject-사유&quot;&gt;앱 등록시 reject 사유&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;구글 로그인 시 보안을 다 풀어두어도 새로운 핸드폰에서 로그인시 인증을 한번 거쳐야 한다. 하지만 Reviewer들은 해주지 않는다. 우리가 제공하는 계정은 가장 높은 권한을 가진 바로 로그인할 수 있어야 한다.&lt;/li&gt;
  &lt;li&gt;구글 콘솔 상에서 OAuth인증 파트에서 사용하는 API가 느낌표가 떠있으면 로그인 시에 &lt;strong&gt;this app is not verified&lt;/strong&gt; 라는 것이 뜨는데, 보통의 경우에는 advanced를 눌러 진행할 수 있지만 Reviewer는 이것을 reject사유로 잡는다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>이창권</name></author><summary type="html">react-native로 앱을 만들고 등록하는 과정중의 에러나 힘들었던 사항들을 정리하였습니다. Xcode로 iOS개발 시 빌드 방법(Error처리 포함) Build전 수행해야할 사항 npm install --save : node_modules directory생성 (후에 pod에서 node_modules안의 파일을 건드리기 때문에 sudo는 쓰지말도록 합니다.) react-native link : node.js패키지를 react-native에서 쓰기 위해 native code상의 필요한 부분에 코드를 주입시켜줍니다. link 명령어를 지원하지 않거나 manual한 link방법을 추천하는 패키지도 존재하므로 패키지 별로 문서를 한번 씩 읽어보는 것도 좋습니다.(현재 사용하는 패키지에서는 다 link사용 가능) cd ios&amp;amp;pod install : node.js package를 바로 ios에서 쓰기 위해서는 패키지 관리자를 사용하여야 하는데 이것이 pod입니다. package.json=Podfile, package-lock.jso=Podfile.lock, node_modules=Pods입니다. (Pod와 관련해서 에러가 난다면 Podfile.lock, Pods를 삭제 후, pod install을 합니다.) 이제 Xcode에서 .xcworkspace파일을 엽니다(Pod를 쓰기 때문에 .xcodeproj대신 .xcworkspace를 엽니다) Build 시 발생하는 주요 에러 third-party와 관련되어 에러가 날 수 있습니다.(파일이 없습니다. 어쩌구 저쩌구….) third-party에서 패키지를 제대로 설치하지 못하는 모양입니다. 수동으로 해줍시다. cd node_modules/react-native/third-party/glog-0.3.4 ./configure make&amp;amp;make install 소스파일로 된 패키지를 설치하실 때 기본적으로 내리는 3가지 명령어가 있는데 그것이 바로 configure, make, make install 입니다. 여기서 소스파일이란 것은 설치파일에 대한 소스 파일입니다. 그러므로 컴파일을 하고나면 설치파일이 생기는 것이죠. 그리고 위의 세가지 명령에 대해 알아보도록 하죠. configure 는 환경설정을 해주는 명령어입니다. 컴파일을 할 때 어떤 옵션을 넣거나 할 때 configure 뒤에 옵션을 넣어줍니다. 여기에 어떤 옵션이 정확히 들어간다고 말씀드릴 수 있는 것은 아니고 소스를 제작한 자가 readme 파일 등에 명시되어 있습니다. make 는 소스를 컴파일 하는 것입니다. 컴파일이란 것은 소스파일을 사용자가 실행 가능한 파일로 만들어 주는 과정을 말합니다. make 과정이 끝나고 나면 설치파일이 생성된 상태라고 볼 수 있습니다. make install 은 설치를 하는 과정입니다. 앞 과정에서 생성된 설치파일을 실행해서 설치를 끝내는 과정입니다. No member named ‘__rip’ in ‘__darwin_arm_thread_state64’ 에러 ucontext_t *context = reinterpret_cast&amp;lt;ucontext_t *&amp;gt;(ucontext_in_void); return (void*)context-&amp;gt;PC_FROM_UCONTEXT; // &amp;lt;---- build error here 를 return NULL;로 code를 직접 수정해줍니다. 앱 등록시 reject 사유 구글 로그인 시 보안을 다 풀어두어도 새로운 핸드폰에서 로그인시 인증을 한번 거쳐야 한다. 하지만 Reviewer들은 해주지 않는다. 우리가 제공하는 계정은 가장 높은 권한을 가진 바로 로그인할 수 있어야 한다. 구글 콘솔 상에서 OAuth인증 파트에서 사용하는 API가 느낌표가 떠있으면 로그인 시에 this app is not verified 라는 것이 뜨는데, 보통의 경우에는 advanced를 눌러 진행할 수 있지만 Reviewer는 이것을 reject사유로 잡는다.</summary></entry><entry><title type="html">부스트 코스(웹) PROJ3-1</title><link href="https://changgunyee.github.io/boost-course/2019/07/10/boostCourse(web)-proj3-1.html" rel="alternate" type="text/html" title="부스트 코스(웹) PROJ3-1" /><published>2019-07-10T00:00:00+09:00</published><updated>2019-07-10T00:00:00+09:00</updated><id>https://changgunyee.github.io/boost-course/2019/07/10/boostCourse(web)-proj3-1</id><content type="html" xml:base="https://changgunyee.github.io/boost-course/2019/07/10/boostCourse(web)-proj3-1.html">&lt;p&gt;이번에 부스트 코스(웹) 과정을 시작하게 되었습니다.&lt;/p&gt;

&lt;p&gt;그럼 부스트 코스가 무엇인지 부터 알려드려야겠죠?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;부스트코스(웹)이란?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;부스트코스에서는 단순히 이론이나 지식만을 배우는 것이 아니라 프로젝트를 통해 다양한 웹 애플리케이션을 직접 만들어보게 됩니다. 단계별 프로젝트를 통해 웹 개발 실무를 경험해보세요. 전문가의 코드리뷰와 반복적인 코드 작성으로 실무형 웹서비스를 직접 만드는 수준까지 발전할 수 있습니다!&lt;/p&gt;

&lt;p&gt;이 과정을 통해&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 현업에서 활용되는 HTML/CSS, JavaScript, JAVA, Spring, Spring MVC, Spring JDBC, SQL에 대해 이해할 수 있습니다.
- 실제 운영되고 있는 서비스인 &amp;lt;네이버 예약&amp;gt;을 처음부터 끝까지 직접 만들어보는 경험을 하게 됩니다.
- 프론트엔드, 백엔드를 막론하고 실무에 필요한 기초적인 웹 애플리케이션을 혼자 만들어 볼 수 있는 수준으로 성장합니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 코스를 통해서는 전문가에게 프로젝트 리뷰를 받아볼수도 있습니다!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 유료 결제하여 프로젝트를 제출할 수 있습니다.
- 현업 선배 개발자가 프로젝트를 검토한 후 명확하고 친절한 코드리뷰를 제공합니다.
- 코드리뷰와 피드백을 참고하여 모든 프로젝트를 성공적으로 통과해보세요!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;웹-프로젝트-3-시작&quot;&gt;웹 프로젝트 3 시작!&lt;/h3&gt;

&lt;p&gt;프로젝트3부터 프로젝트 6까지는 기존에 네이버에 존재하는 예약 관리 시스템을 만들어 보는 것입니다.
프로젝트3 수업에서 학습하는 내용은 간단히 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Web Animation
- Web UI &amp;gt; DOMContentLoaded이벤트, Event delegation, HTML templating
- Tab UI 실습
- Spring Core &amp;gt; Spring에 대한 기초 학습, Java Config&amp;amp;Xml을 이용한 설정
- Spring JDBC의 이해와 실습
- Spring MVC에 대한 이해와 실습
- 레이어드 아키텍처 실습
- Rest Controller의 기초와 실습
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;프로젝트 3-1은 백엔드와 관련된 내용으로 다음과 같은 기술을 구현해야 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 웹백엔드 기술요구사항

    - 제공된 SQL을 이용해서 테이블을 생성하고, 샘플데이터를 입력합니다.
    - maven을 이용해서 웹 어플리케이션 프로젝트를 작성합니다.
    - 학습했던 것처럼 controller,service,dao로 레이어드 아키텍쳐를 구성합니다.
    - spring JDBC를 이용하여 주어진 테이블로부터 입력, 수정, 삭제, 조회하는 DAO와 DTO를 
      작성합니다.
    - 서비스 인터페이스를 작성하고 해당 서비스 인터페이스에 비지니스 메소드를 작성합니다.
    - 서비스 인터페이스를 구현하는 클래스를 작성합니다.
    - 해당 구현 클래스의 메소드에 적절한 트랜잭션에 관련된 애노테이션을 사용합니다.
    - 클라이언트에게 Web API를 제공하기 위해 RestController 를 작성합니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;프로젝트 통과한 모습입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-07-10/부스트코스3-1_pass모습.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;부스트 코스 에이스 또한 신청하였습니다!!!!&lt;/p&gt;

&lt;p&gt;앞으로 진행하면서, 프로젝트 3-2 부터는 학습한 내용을 따로 포스팅하고 프로젝트 진행시 에러나 어려웠던 점 또한 기록하려고 합니다.&lt;/p&gt;

&lt;p&gt;감사합니다~~&lt;/p&gt;</content><author><name>이창권</name></author><summary type="html">이번에 부스트 코스(웹) 과정을 시작하게 되었습니다. 그럼 부스트 코스가 무엇인지 부터 알려드려야겠죠? 부스트코스(웹)이란? 부스트코스에서는 단순히 이론이나 지식만을 배우는 것이 아니라 프로젝트를 통해 다양한 웹 애플리케이션을 직접 만들어보게 됩니다. 단계별 프로젝트를 통해 웹 개발 실무를 경험해보세요. 전문가의 코드리뷰와 반복적인 코드 작성으로 실무형 웹서비스를 직접 만드는 수준까지 발전할 수 있습니다! 이 과정을 통해 - 현업에서 활용되는 HTML/CSS, JavaScript, JAVA, Spring, Spring MVC, Spring JDBC, SQL에 대해 이해할 수 있습니다. - 실제 운영되고 있는 서비스인 &amp;lt;네이버 예약&amp;gt;을 처음부터 끝까지 직접 만들어보는 경험을 하게 됩니다. - 프론트엔드, 백엔드를 막론하고 실무에 필요한 기초적인 웹 애플리케이션을 혼자 만들어 볼 수 있는 수준으로 성장합니다. 이 코스를 통해서는 전문가에게 프로젝트 리뷰를 받아볼수도 있습니다! - 유료 결제하여 프로젝트를 제출할 수 있습니다. - 현업 선배 개발자가 프로젝트를 검토한 후 명확하고 친절한 코드리뷰를 제공합니다. - 코드리뷰와 피드백을 참고하여 모든 프로젝트를 성공적으로 통과해보세요! 웹 프로젝트 3 시작! 프로젝트3부터 프로젝트 6까지는 기존에 네이버에 존재하는 예약 관리 시스템을 만들어 보는 것입니다. 프로젝트3 수업에서 학습하는 내용은 간단히 다음과 같습니다. - Web Animation - Web UI &amp;gt; DOMContentLoaded이벤트, Event delegation, HTML templating - Tab UI 실습 - Spring Core &amp;gt; Spring에 대한 기초 학습, Java Config&amp;amp;Xml을 이용한 설정 - Spring JDBC의 이해와 실습 - Spring MVC에 대한 이해와 실습 - 레이어드 아키텍처 실습 - Rest Controller의 기초와 실습 프로젝트 3-1은 백엔드와 관련된 내용으로 다음과 같은 기술을 구현해야 합니다. - 웹백엔드 기술요구사항 - 제공된 SQL을 이용해서 테이블을 생성하고, 샘플데이터를 입력합니다. - maven을 이용해서 웹 어플리케이션 프로젝트를 작성합니다. - 학습했던 것처럼 controller,service,dao로 레이어드 아키텍쳐를 구성합니다. - spring JDBC를 이용하여 주어진 테이블로부터 입력, 수정, 삭제, 조회하는 DAO와 DTO를 작성합니다. - 서비스 인터페이스를 작성하고 해당 서비스 인터페이스에 비지니스 메소드를 작성합니다. - 서비스 인터페이스를 구현하는 클래스를 작성합니다. - 해당 구현 클래스의 메소드에 적절한 트랜잭션에 관련된 애노테이션을 사용합니다. - 클라이언트에게 Web API를 제공하기 위해 RestController 를 작성합니다. 프로젝트 통과한 모습입니다. 부스트 코스 에이스 또한 신청하였습니다!!!! 앞으로 진행하면서, 프로젝트 3-2 부터는 학습한 내용을 따로 포스팅하고 프로젝트 진행시 에러나 어려웠던 점 또한 기록하려고 합니다. 감사합니다~~</summary></entry><entry><title type="html">connect4게임의 AI를 만들어보자</title><link href="https://changgunyee.github.io/develop/2019/05/01/connect4_ai.html" rel="alternate" type="text/html" title="connect4게임의 AI를 만들어보자" /><published>2019-05-01T00:00:00+09:00</published><updated>2019-05-01T00:00:00+09:00</updated><id>https://changgunyee.github.io/develop/2019/05/01/connect4_ai</id><content type="html" xml:base="https://changgunyee.github.io/develop/2019/05/01/connect4_ai.html">&lt;p&gt;2019 1학기 김현철 교수님의 인공지능 수업을 듣게 되었습니다.
AI에 사용하는 여러가지 인공지능 기법을 배우게 되었고 그 중 min-max algorithm을 실제로 구현해 보기로 하였습니당.&lt;/p&gt;

&lt;p&gt;간단한 게임을 선택해야할 것 같아서 connect4를 선정하게 되었습니다. 구글에 참고할 만한 자료가 많이 있는 것도 선정한 이유였습니다.
게임 룰은 column을 선택해서 해당 column의 맨 위에 자신의 돌을 놓을 수 있습니다. 대각선이나 가로, 세로로 4개를 연속해서 채우면 이기게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-05-01/Connect_Four.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;min-max algorithm은 기본적으로 hueristic을 1개 선정합니다.
heuristic을 이용해 나의 차례에는 내 점수가 최대가 되게 상대의 차례에는 내 점수가 최소가 되게 한다는 가정을 하고 Tree를 만들어 정해놓은 depth만큼 탐색을 해 나의 점수가 최대가 되는 노드로 돌을 두게 합니다.&lt;/p&gt;

&lt;p&gt;작동 방식은 아래와 이미지를 보면 이해가 더 명확합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-05-01/minmax1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-05-01/minmax2.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;만든 AI가 depth를 5를 넘기면 시간이 너무 많이 걸리게 됩니다. 이때 alpha-beta pruning을 이용해서 탐색 필요가 없는 노드들은 가지치기를 해서 시간을 줄여줍니다. 가지치기를 적용하니 depth 10까지도 1분 안에 해결됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-05-01/pruning.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;만든 connect4_ai의 github 주소는 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/changgunyee/connect4&quot;&gt;https://github.com/changgunyee/connect4&lt;/a&gt;&lt;/p&gt;</content><author><name>이창권</name></author><summary type="html">2019 1학기 김현철 교수님의 인공지능 수업을 듣게 되었습니다. AI에 사용하는 여러가지 인공지능 기법을 배우게 되었고 그 중 min-max algorithm을 실제로 구현해 보기로 하였습니당. 간단한 게임을 선택해야할 것 같아서 connect4를 선정하게 되었습니다. 구글에 참고할 만한 자료가 많이 있는 것도 선정한 이유였습니다. 게임 룰은 column을 선택해서 해당 column의 맨 위에 자신의 돌을 놓을 수 있습니다. 대각선이나 가로, 세로로 4개를 연속해서 채우면 이기게 됩니다. min-max algorithm은 기본적으로 hueristic을 1개 선정합니다. heuristic을 이용해 나의 차례에는 내 점수가 최대가 되게 상대의 차례에는 내 점수가 최소가 되게 한다는 가정을 하고 Tree를 만들어 정해놓은 depth만큼 탐색을 해 나의 점수가 최대가 되는 노드로 돌을 두게 합니다. 작동 방식은 아래와 이미지를 보면 이해가 더 명확합니다. 만든 AI가 depth를 5를 넘기면 시간이 너무 많이 걸리게 됩니다. 이때 alpha-beta pruning을 이용해서 탐색 필요가 없는 노드들은 가지치기를 해서 시간을 줄여줍니다. 가지치기를 적용하니 depth 10까지도 1분 안에 해결됩니다. 만든 connect4_ai의 github 주소는 다음과 같습니다. https://github.com/changgunyee/connect4</summary></entry><entry><title type="html">고려대학교 영재교육원 홈페이지 수정</title><link href="https://changgunyee.github.io/develop/2019/03/26/gifted-homepage.html" rel="alternate" type="text/html" title="고려대학교 영재교육원 홈페이지 수정" /><published>2019-03-26T00:00:00+09:00</published><updated>2019-03-26T00:00:00+09:00</updated><id>https://changgunyee.github.io/develop/2019/03/26/gifted-homepage</id><content type="html" xml:base="https://changgunyee.github.io/develop/2019/03/26/gifted-homepage.html">&lt;p&gt;고려대학교 영재교육원 홈페이지에서 관리자 페이지의 UI를 수정하기 편하게 고쳐달라는 요청을 받았습니다.&lt;/p&gt;

&lt;p&gt;주소 : &lt;a href=&quot;https://gifted.korea.ac.kr/&quot;&gt;https://gifted.korea.ac.kr/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-03-26/1.PNG&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;수강신청을 하는 파트에서 여러 개의 수업을 한번에 삭제하는 방법이 없어 불편했습니다.
이를 checkbox input을 이용해 삭제할 수업 목록을 받아서 삭제하도록 수정하였습니다.
무엇보다 php가 처음이고 그누보드5가 그렇게 편한 프로그램은 아니여서 생각보다 시간이 걸렸네요.&lt;/p&gt;

&lt;p&gt;php를 공부해보게 되서 재밌었습니당. &lt;del&gt;깨달은 것은 Javascript가 짱짱맨이라는거…..&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;이참에 라라벨 설치해서 php나 좀 더 깊게 공부해봐야겠습니다~.&lt;/p&gt;

&lt;p&gt;ㄲㅡㅌ~~~~~~~~~~~~~~~&lt;/p&gt;</content><author><name>이창권</name></author><summary type="html">고려대학교 영재교육원 홈페이지에서 관리자 페이지의 UI를 수정하기 편하게 고쳐달라는 요청을 받았습니다. 주소 : https://gifted.korea.ac.kr/ 수강신청을 하는 파트에서 여러 개의 수업을 한번에 삭제하는 방법이 없어 불편했습니다. 이를 checkbox input을 이용해 삭제할 수업 목록을 받아서 삭제하도록 수정하였습니다. 무엇보다 php가 처음이고 그누보드5가 그렇게 편한 프로그램은 아니여서 생각보다 시간이 걸렸네요. php를 공부해보게 되서 재밌었습니당. 깨달은 것은 Javascript가 짱짱맨이라는거….. 이참에 라라벨 설치해서 php나 좀 더 깊게 공부해봐야겠습니다~. ㄲㅡㅌ~~~~~~~~~~~~~~~</summary></entry></feed>